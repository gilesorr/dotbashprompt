#!/bin/bash
#
# Large portions of this were lovingly borrowed from nitrous.io's prompt
# because it's simple, readable, and works well.  Thanks!  It's since been
# modified a LOT.
#
# 2016-02-24: added "+" after ahead("^") and/or behind("v") if there are
# untracked files.  Still doesn't show if there are staged-but-uncommitted
# files.

function _p_git () {

    function _p_git_dirty () {
        command git diff --no-ext-diff --quiet --exit-code &>/dev/null
        if [ $? -eq 128 ]
        then
            echo -n "(bare)"
        fi
        status="$(command git status 2> /dev/null)"
        upstream="$(echo ${status} | command grep 'Your branch is')"
        if [ "${upstream}x" != "x" ]
        then
            # we appear to have an origin
            _p_git_uptodate=$(echo "${upstream}" | command grep "up-to-date"      -q ; echo $?)
            _p_git_ahead=$(   echo "${upstream}" | command grep "ahead of"        -q ; echo $?)
            _p_git_behind=$(  echo "${upstream}" | command grep "behind"          -q ; echo $?)
            _p_git_modified=$(echo "${status}"   | command grep "not staged for"  -q ; echo $?)
            _p_git_untrack=$( echo "${status}"   | command grep "ntrack"          -q ; echo $?)
            _p_git_staged=$( echo "${status}"    | command grep "to be committed" -q ; echo $?)
            if [ ${_p_git_modified} -eq 0 ]
            then
                echo -n "!"
            fi
            if [ ${_p_git_ahead} -eq 0 ]
            then
                echo -n "^"
            fi
            if [ ${_p_git_behind} -eq 0 ]
            then
                echo -n "v"
            fi
            if [ ${_p_git_untrack} -eq 0 ]
            then
                echo -n "+"
            fi
            if [ ${_p_git_staged} -eq 0 ]
            then
                echo -n "_"
            fi
        fi
    }

    function _p_git_branch () {
        branch_name=$(command git branch --no-color 2> /dev/null | command sed -e '/^[^*]/d' -e "s/* \(.*\)/\1/")
        if [ "${branch_name}x" != "x" ]
        then
            echo -n "${branch_name}$(_p_git_dirty)"
        fi
    }

    _p_git_branch

}

