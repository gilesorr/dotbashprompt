#!/usr/bin/env bash
#
#   Filename:      test
#   Created:       2022-05-14
#   Last Modified: 2022-05-14
#   Purpose:       edit me
#
# From
# https://unix.stackexchange.com/questions/124407/what-color-codes-can-i-use-in-my-bash-ps1-prompt
# hoping to use this to be able to calculate inverses of colours.
#
#   The main portion of this chart, colors 16 - 231 (notice they are not in
#   numerical order) are a 6 x 6 x 6 RGB color cube. "Color cube" refers to
#   the fact that an RGB color space can be represented using a three
#   dimensional array (with one axis for red, one for green, and one for
#   blue). Each color in the cube here can be represented as coordinates in
#   a 6 x 6 x 6 array, and the index in the chart calculated thusly:
#
#       16 + R * 36 + G * 6 + B
#
#   The first color in the cube, at index 16 in the chart, is black (RGB 0,
#   0, 0).
#
# BIG QUESTION: what's the "opposite" of an RGB colour in the 0-5 range?
# 0<->5 seems obvious, but 2<->3 provides very little contrast and is not
# obvious.

RGBcolor () {
    # This zero-pads ...
    integer="$(echo "16 + $1 * 36 + $2 * 6 + $3" | bc)"
    # don't have to check for single digit numbers as colours start at 16
    if [ ${#integer} -eq 2 ]
    then
        echo "0${integer}"
    else
        echo "${integer}"
    fi
}

contrastingorig () {
    # 0<->5, 1<->4, 2<->3
    case $1 in
        0) echo 5;;
        1) echo 4;;
        2) echo 3;;
        3) echo 2;;
        4) echo 1;;
        5) echo 0;;
    esac
}

contrastingv2 () {
    # 0<->5, 1<->3, 2<->4
    # somewhat more readable, probably less "correct"
    case $1 in
        0) echo 5;;
        1) echo 3;;
        2) echo 4;;
        3) echo 1;;
        4) echo 2;;
        5) echo 0;;
    esac
}

contrasting () {
    # 0<->3, 1<->4, 2<->5 ... the offset version
    # somewhat more readable, probably less "correct"
    case $1 in
        0) echo 3;;
        1) echo 4;;
        2) echo 5;;
        3) echo 0;;
        4) echo 1;;
        5) echo 2;;
    esac
}

cat << EOF
Based on a good explanation and some code from:
https://unix.stackexchange.com/questions/124407/what-color-codes-can-i-use-in-my-bash-ps1-prompt

   The main portion of this chart, colors 16 - 231 (notice they are not in
   numerical order) are a 6 x 6 x 6 RGB color cube. "Color cube" refers to
   the fact that an RGB color space can be represented using a three
   dimensional array (with one axis for red, one for green, and one for
   blue). Each color in the cube here can be represented as coordinates in
   a 6 x 6 x 6 array, and the index in the chart calculated thusly:

       16 + R * 36 + G * 6 + B

   The first color in the cube, at index 16 in the chart, is black (RGB 0,
   0, 0).

"3-2-0:049/136" below indicates RED 3, GREEN 2, BLUE 0, which calculates
the the given background of 136 ANSI.  My mediocre algorithm is meant to
choose a contrasting colour (NOTE: this is NOT the "opposite" colour) as
foreground, in this case 049.

EOF

for red in {0..5}
do
    for green in {0..5}
    do
        for blue in {0..5}
        do
            bg="$(RGBcolor "${red}" "${green}" "${blue}")"
            fg="$(RGBcolor "$(contrasting "${red}")" "$(contrasting "${green}")" "$(contrasting "${blue}")")"
            echo -en "\\033[1;38;5;${fg};48;5;${bg}m${red}-${green}-${blue}:${fg}/${bg}\\033[0m"
            echo -en "\033[0;0m "
        done
        echo
    done
    echo
done

