#!/bin/bash
# shebang is unnecessary, but helps vim identify the filetype
#
# shellcheck disable=SC1090  # Can't follow non-constant source
# shellcheck disable=SC1091  # disable "not following" included files
# shellcheck disable=SC1117  # "backslash is literal"
# shellcheck disable=SC2154  # "referenced but not assigned"
#
# This one has everything.
#
# It's probably quite resource-hungry and a bad idea on things like
# Raspberry Pis.
#
# 2018-05-05: stat fails (missing operand) in a directory where there are
# no real files - ie. /dev/ where it's all devices and links.

echo "Prompt Title: overload"
echo "Includes:     git, load, file data, colourslash PWD, newline, battery, user@host, ephemeral dfsl and date-time"
echo "For:          a dark background" # Mac? works on Linux
echo "Requires:     git"
echo "Warning:      very processor intensive: switch prompts if it's slow!"

# Get the components we need:
source "${PROMPTDIR}/_p_colours" # get colours into the environment
source "${PROMPTDIR}/directory/_p_git"
source "${PROMPTDIR}/machine/_p_powerconnected"
source "${PROMPTDIR}/machine/_p_powerpercent"
source "${PROMPTDIR}/machine/_p_load1"
source "${PROMPTDIR}/machine/_p_df_sl"
source "${PROMPTDIR}/directory/_p_colourslashpwd"
source "${PROMPTDIR}/directory/_p_numvisfiles"
source "${PROMPTDIR}/directory/_p_numhiddenfiles"
source "${PROMPTDIR}/directory/_p_numvisdirs"
source "${PROMPTDIR}/directory/_p_numhiddendirs"
source "${PROMPTDIR}/directory/_p_numalllinks"
source "${PROMPTDIR}/directory/_p_numalldevices"
source "${PROMPTDIR}/directory/_p_statbytesum"
source "${PROMPTDIR}/directory/_p_xtermtitle"

if (( UID == 0 ))
then
    _p_usercolour="${_pc_b_red}"
else
    _p_usercolour="${_pc_b_gray}"
fi

_p_xtermtitle # generates the _p_TITLEBAR variable

prompt_command () {
    _p_retval=$? # capture the return value before you change it w/prompt
    if (( _p_retval == 0 ))
    then
        # disappear the return value if it's zero
        _p_retval=""
    fi
}

PROMPT_COMMAND=" prompt_command ; ${PROMPT_COMMAND} "

#####################################################################
#               OS-based Colour Settings                            #
#####################################################################
# Going to have to do Colour Settings for file types by the OS ...
#
# This is a do-once setting, doesn't need to be done for every prompt.
if [ "${_p_os}" == "Darwin" ]
then
    # character devices on Mac are blue FG, yellow BG
    # block     devices on Mac are blue FG, cyan   BG
    # Going with "character" as it's more common ...
    # This didn't work:
    _p_device_colour="${_p_b_blue}${_p_bg_yellow}"
    _p_link_colour="${_pc_b_purple}"
elif [ "${_p_os}" == "Linux" ]
then
    _p_device_colour="${_pc_b_yellow}"
    _p_link_colour="${_pc_b_cyan}"
else
    # just Linux colours again:
    _p_device_colour="${_p_b_yellow}"
    _p_link_colour="${_pc_b_cyan}"
fi

_p_showobj () {
    # takes two params (whole numbers, no negatives), outputs "x.y":
    #   - initially this was number of visible and hidden files
    #   - x and y value are only echoed if they're non-zero
    #   - the dot is only echoed if there are hidden values
    #   - a trailing space is echoed if either is non-zero
    #
    _p_vis=${1}
    _p_hid=${2}
    if (( _p_vis > 0 ))
    then
        echo -n "${_p_vis}"
    fi
    if (( _p_hid > 0 ))
    then
        echo -n ".${_p_hid}"
    fi
    if (( $(( _p_vis + _p_hid )) > 0 ))
    then
        echo -n " "
    fi
}

PS1="${_p_TITLEBAR}${_pc_b_gray}-"
PS1+="${_pc_b_blue}-"
PS1+="${_pc_b_purple}\$(_p_git)"
PS1+="${_pc_b_blue}-"
PS1+="${_pc_b_gray}-"

#####################################################################
# Load:
PS1+="${_pc_b_blue}-("
PS1+="${_pc_b_yellow}\$(_p_load1)"
PS1+="${_pc_b_blue})-"
PS1+="${_pc_b_gray}-"
# Files:
PS1+="| "
PS1+="${_pc_b_gray}\$(_p_showobj \$(_p_numvisfiles) \$(_p_numhiddenfiles) )"
PS1+="${_pc_b_blue}\$(_p_showobj \$(_p_numvisdirs) \$(_p_numhiddendirs) )"
PS1+="${_p_link_colour}\$(_p_showobj \$(_p_numalllinks) 0 )"
PS1+="${_p_device_colour}\$(_p_showobj \$(_p_numalldevices) 0 )${_pc_nocolour}"
PS1+="\$(_p_statbytesum) "
PS1+="${_pc_b_gray}|"
#####################################################################

PS1+="-"
PS1+="${_pc_b_blue}-("
PS1+="\$(_p_colourslashpwd \${_pc_b_red} \${_pc_b_yellow} \${_pc_nocolour})"
PS1+="${_pc_b_blue})-"
PS1+="${_pc_b_gray}-"
PS1+="${_pc_nocolour}"
PS1+="\n"                  # newline
PS1+="${_pc_b_gray}-"
PS1+="${_pc_b_blue}-("
PS1+="${_pc_b_purple}\$(_p_powerconnected)\$(_p_powerpercent)%"
PS1+="${_pc_nocolour} "
PS1+="${_p_usercolour}\u"
PS1+="${_pc_b_blue}@"
PS1+="${_pc_b_gray}\h"
PS1+="${_pc_b_blue})-"
PS1+="${_pc_b_gray}-"
PS1+="${_pc_bg_gray}${_pc_b_red}\${_p_retval}"
PS1+="${_pc_nocolour}"
PS1+="${_pc_b_gray}\\\$"
PS1+="${_pc_nocolour} "
# Add our "ephemeral" data:
PS1+="\[\$(
    tput sc
    echo -en \"   ${_c_darkgray}\$(_p_df_sl)  \$(date +%m-%d-%H%M)${_c_nocolour}\"
    tput rc
)\]"

export PS1

