#!/bin/bash
# shebang is unnecessary, but helps vim identify the filetype
#
# shellcheck disable=SC1090  # disable "Can't follow non-constant source."
# shellcheck disable=SC1091  # disable "not following" included files
# shellcheck disable=SC1117  # "backslash is literal"
# shellcheck disable=SC2154  # "referenced but not assigned"
#
# Colourful bar of information above a simple prompt.

echo "Prompt Title: bar"
echo "Includes:     battery, user@hostname, short PWD, git status, return value"
echo "For:          dark or light background"
echo "Requires:     git"

# Get the components we need:
source "${PROMPTDIR}/_p_colours" # get colours into the environment
source "${PROMPTDIR}/directory/_p_git"
source "${PROMPTDIR}/directory/_p_colourslashpwd"
source "${PROMPTDIR}/directory/_p_xtermtitle"
source "${PROMPTDIR}/machine/_p_powerconnected"
source "${PROMPTDIR}/machine/_p_powerpercent"

prompt_command () {
    _p_retval=$? # capture the return value before you change it
    if (( _p_retval == 0 ))
    then
        # disappear the return value if it's zero
        _p_retval=""
    fi

    # This is needed to calculate prompt width to fill the full width of
    # the terminal.

    local pwidth=0
    _p_pow="$(_p_powerconnected)$(_p_powerpercent)%"
    # we'll use this var in PS1 to avoid calling it twice:
    _p_newgit="$(_p_git)"
    # username @ hostname for length calculation:
    # was using ${USER} but it's less reliable than $(whoami)
    local uath="$(whoami)@$(hostname -s)"
    # pwidth = prompt width
    # "+ 2" for the spaces between content
    pwidth=$(( pwidth + ${#_p_pow} + ${#uath} + ${#PWD} + ${#_p_newgit} + 2 ))
    _p_fill=""
    if (( pwidth > COLUMNS ))
    then
        # prompt is too wide, truncate the PWD
        # add two to compensate for added truncation indicator on prompt
        # ... we should have a variable length based on the verbiage used,
        # but the current setup doesn't allow that)
        local  overage=$(( pwidth - COLUMNS + 1 ))
        (( _p_newPWDlen = ${#PWD} - overage ))
    else
        local filllength=$(( COLUMNS - pwidth ))
        (( i = 0 ))
        while (( i < filllength ))
        do
            _p_fill="${_p_fill} "
            i=$(( i + 1 ))
        done
    fi
}

_p_xtermtitle # generates the _p_TITLEBAR variable

export PROMPT_COMMAND="prompt_command"

PS1=""
PS1+="${_p_TITLEBAR}"
PS1+="${_pc_b_yellow}${_pc_bg_blue}\${_p_pow}"
PS1+=" "
PS1+="${_pc_b_gray}\u${_pc_b_yellow}@${_pc_b_gray}\h"
PS1+="${_pc_b_yellow}:"
PS1+="\$(_p_colourslashpwd \${_pc_b_red}\${_pc_bg_blue} \${_pc_b_yellow}\${_pc_bg_blue} \${_pc_bg_blue} \${_p_newPWDlen})"
PS1+="${_pc_b_gray}\${_p_fill}\${_p_newgit}"
PS1+="${_pc_nocolour}\n"
PS1+="${_pc_bg_gray}${_pc_b_red}\${_p_retval}"
PS1+="${_pc_nocolour}\\\$"
PS1+="${_pc_nocolour} "

export PS1

