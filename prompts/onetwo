#!/bin/bash
# shebang is unnecessary, but helps vim identify the filetype
#
# shellcheck disable=SC1090  # disable "Can't follow non-constant source."
# shellcheck disable=SC1091  # disable "not following" included files
# shellcheck disable=SC1117  # "backslash is literal"
# shellcheck disable=SC2154  # "referenced but not assigned"
#
# A one- or two-line prompt.  The number of lines varies according to how
# much content is in the prompt.  Adjust "minRemainingWidth" variable to
# change the behaviour.  Same as "onetwo" prompt but adds power indicator.

echo "Prompt Title: onetwo"
echo "Includes:     pwd, git, power, user@host"
echo "For:          a dark background"
echo "Requires:     git"

source "${PROMPTDIR}/_p_colours" # get colours into the environment
source "${PROMPTDIR}/directory/_p_git"
source "${PROMPTDIR}/directory/_p_xtermtitle"
source "${PROMPTDIR}/machine/_p_powerconnected"
source "${PROMPTDIR}/machine/_p_powerpercent"

if [ "${_p_uid0}" == "true" ]
then
    export _p_usercolour="${_pc_b_red}"
else
    export _p_usercolour=""
fi

_p_screenmux=""
if [ "${_p_in_tmux}" == "true" ]
then
    _p_screenmux="${_p_screenmux}[t]"
fi
if [ "${_p_in_screen}" == "true" ]
then
    _p_screenmux="${_p_screenmux}[s]"
fi

(( minRemainingWidth = 50 ))

prompt_command () {
    _p_retval=$? # capture the return value before you change it
    # set some variables to be displayed later
    p_displayGit="$(_p_git)"
    if [[ "${_p_has_battery}" == "true" ]]
    then
        p_displayPower="($(_p_powerconnected)$(_p_powerpercent)%)"
    else
        p_displayPower=""
    fi
    _p_tilde="~"
    # on Linux/Bash4 we need "\~", on Mac/Bash3 we need "~" in this
    # substitution, so we get around it by making it a variable ...:
    _p_dir="${PWD/${HOME}/${_p_tilde}}"
    if (( _p_retval == 0 ))
    then
        # disappear the return value if it's zero
        _p_retval=""
    fi
    _p_xtermtitle # generates the _p_TITLEBAR variable
}

PROMPT_COMMAND=prompt_command

PS1=""
PS1="${PS1}${_p_TITLEBAR}"
PS1="${PS1}\$(
remainingWidth=\$(( COLUMNS - \${#_p_screenmux} - \${#p_displayPower} - \${#_p_dir} - \${#p_displayGit} - \$(echo "\u@\h" | wc -c) - 3 ))

if (( remainingWidth <= minRemainingWidth )) ; # the two line version
then
    fillWidth=\$(( COLUMNS - \${#p_displayPower} - \${#_p_dir} - \${#p_displayGit} ))
    fill=\"\";
    for (( i=0 ; i<\${fillWidth} ; i=i+1))
    do
        fill=\"\${fill} \"
    done

    echo -en \"${_pc_b_gray}\${p_displayPower}${_pc_nocolour}\"
    if ! [ -w . ]; then echo -en \"\${_pc_bg_red}\"; fi
    echo -en \"\${_p_dir}\"
    echo -en \"\${_pc_nocolour}\"
    echo -en \"\${fill}\"
    echo -en \"${_pc_b_green}\${p_displayGit}${_pc_nocolour}\"
    echo -en \"\n\"
    echo -en \"${_p_screenmux}\"
    echo -en \"\u${_pc_b_purple}@${_pc_nocolour}\h\"
    echo -en \"${_pc_bg_gray}${_pc_b_red}\${_p_retval}\"
    echo -en \"${_pc_nocolour}\"
    echo -e  \"${_pc_b_purple}\$${_pc_nocolour} \";
else   # the one line version
    echo -en \"${_p_screenmux}\"
    echo -en \"${_pc_b_gray}\${p_displayPower}${_pc_nocolour}\"
    if ! [ -w . ]; then echo -en \"\${_pc_bg_red}\"; fi
    echo -en \"\${_p_dir}\"
    echo -en \"\${_pc_nocolour}\"
    if [ \"\${p_displayGit}x\" != \"x\" ]
    then
        echo -en \"${_pc_b_purple}|\"
        echo -en \"${_pc_b_green}\${p_displayGit}\"
    fi
    echo -en \"${_pc_b_purple}|${_pc_nocolour}\"
    echo -en \"${_p_usercolour}\u${_pc_b_purple}@${_pc_nocolour}\h\"
    echo -en \"${_pc_bg_gray}${_pc_b_red}\${_p_retval}\"
    echo -en \"${_pc_nocolour}\"
    echo -e  \"${_pc_b_purple}\$${_pc_nocolour} \";
fi
)"

export PS1

